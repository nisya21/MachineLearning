# -*- coding: utf-8 -*-
"""Final Exam_Paper1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NdcxuPvztWXGJXJeyc6m_RaT7vBFScKo
"""

import torch #Untuk mengimport library yang digunakan
import torchvision #Untuk mengimport library yang digunakan
import torch.nn as nn #Untuk menyimpan fungsi-fungsi Neural Network terhadap nn
import torch.nn.functional as F #Untuk menyimpan fungsi-fungsi Neural Network terhadap F
import torch.optim as optim #untuk mengimplementasikan berbagai algortima operasi
import matplotlib.pyplot as plt #untuk melakukan visualisasi data

n_epochs = 3 #untuk menentukan banyaknya iterasi yang di training, dan disimpan pada variabel n_epochs
batch_size_train = 64 #untuk menentukan batch size data train
batch_size_test = 1000 #untuk menentukan batch size data test
learning_rate = 0.01 #sebagai algoritma untuk optimasi
momentum = 0.5 #sebagai algoritma untuk optimasi
log_interval = 10 #untuk pencatatan jumlah menit

random_seed = 1 #untuk menyimpan status fungsi acak
torch.backends.cudnn.enabled = False #Untuk aktifin GPU karena di gcolab udah otomatis jadi di false
torch.manual_seed(random_seed) #untuk menyimpan status fungsi acak

train_loader = torch.utils.data.DataLoader( #digunakan untuk menampung data dengan Dataloader
  torchvision.datasets.MNIST('/files/', train=True, download=True, #memanggil data MNIST dengan menggunakan torchvision.datasets
                             transform=torchvision.transforms.Compose([ #variabel transform mempunyai fungsi didalamnya dengan nama torchvision.transforms.Compose untuk augmentasi data
                               torchvision.transforms.ToTensor(), #untuk mengubah gambar menjadi tensor
                               torchvision.transforms.Normalize( #untuk me-rescale data
                                 (0.1307,), (0.3081,))
                             ])),
  batch_size=batch_size_train, shuffle=True) #nilai batch size dimasukan, kemudian datanya di acak.

test_loader = torch.utils.data.DataLoader( #untuk menampung data loader
  torchvision.datasets.MNIST('/files/', train=False, download=True, #memanggil data MNIST dengan menggunakan torchvision.datasets
                             transform=torchvision.transforms.Compose([ #variabel transform mempunyai fungsi didalamnya dengan nama torchvision.transforms.Compose untuk augmentasi data
                               torchvision.transforms.ToTensor(), #untuk mengubah gambar menjadi tensor
                               torchvision.transforms.Normalize( #untuk me-rescale data
                                 (0.1307,), (0.3081,))
                             ])),
  batch_size=batch_size_test, shuffle=True) #nilai batch size test dimasukan, kemudian datanya di acak

#untuk menampilkan banyaknya jumlah data set
examples = enumerate(test_loader)
batch_idx, (example_data, example_targets) = next(examples)

example_data.shape #data yang dimasukan data test = 1000, chanel = 1, ukuran gambar 28x28

#untuk menampilkan original value data
fig = plt.figure()
for i in range(6):
  plt.subplot(2,3,i+1)
  plt.tight_layout()
  plt.imshow(example_data[i][0], cmap='gray', interpolation='none')
  plt.title("Ground Truth: {}".format(example_targets[i]))
  plt.xticks([])
  plt.yticks([])
fig

class Net(nn.Module): #membuat arsitektur diluar fungsi tensorflow dengan nama Net, kemudian mengambil fungsi dari nn.Module
    def __init__(self): #untuk menurunkan kelas memakai __init__(self)
        super(Net, self).__init__() #untuk menurunkan kelas
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5) #membuat variabel didalam kelas dengan self.conv1, data diambil dari library pytorch, (1, 10) = jumlah filter, kernel size ukuran tiap matrix 5x5
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5) #membuat variabel didalam kelas dengan self.conv2, data diambil dari library pytorch, (10, 20) = jumlah filter, kernel size ukuran tiap matrix 5x5
        self.conv2_drop = nn.Dropout2d() #untuk menonaktifkan sebagian nn yang mempunyai bobot yang sama
        self.fc1 = nn.Linear(320, 50) #CNN disambungkan ke NN, disambungkan ke 320 hiden layer dan 50 hiden layer
        self.fc2 = nn.Linear(50, 10) #CNN disambungkan ke NN, disambungkan ke 50 hiden layer dan disambungkan ke output 10 layer terakhir
    def forward(self, x): #untuk menambahkan aktivasi relu, pooling, dan dropout
        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))
        x = x.view(-1, 320)
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        return F.log_softmax(x) #memakai fungsi aktivasi F.log_softmax karena kelasnya banyak (lebih dari 2)

class Net(nn.Module): #membuat arsitektur diluar fungsi tensorflow dengan nama Net, kemudian mengambil fungsi dari nn.Module
    def __init__(self): #untuk menurunkan kelas memakai __init__(self)
        super(Net, self).__init__() #untuk menurunkan kelas
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5) #membuat variabel didalam kelas dengan self.conv1, data diambil dari library pytorch, (1, 10) = jumlah filter, kernel size ukuran tiap matrix 5x5
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5) #membuat variabel didalam kelas dengan self.conv2, data diambil dari library pytorch, (10, 20) = jumlah filter, kernel size ukuran tiap matrix 5x5
        self.conv2_drop = nn.Dropout2d() #untuk menonaktifkan sebagian nn yang mempunyai bobot yang sama
        self.fc1 = nn.Linear(320, 50) #CNN disambungkan ke NN, disambungkan ke 320 hiden layer dan 50 hiden layer
        self.fc2 = nn.Linear(50, 10) #CNN disambungkan ke NN, disambungkan ke 50 hiden layer dan disambungkan ke output 10 layer terakhir
    def forward(self, x): #untuk menambahkan aktivasi relu, pooling, dan dropout
        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))
        x = x.view(-1, 320)
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        return F.log_softmax(x) #memakai fungsi aktivasi F.log_softmax karena kelasnya banyak (lebih dari 2)

network = Net() #memanggil arsitektur yang telah dibuat lalu disimpan kedalam variabel network
optimizer = optim.SGD(network.parameters(), lr=learning_rate, momentum=momentum) #algortima optimasi yang digunakan SGD, SGD harus membuat parameter dari yang sudah di buat

train_losses = [] #dibuat list kosong untuk menampung proses training
train_counter = [] #dibuat list kosong untuk menampung proses training
test_losses = [] #dibuat list kosong untuk menampung proses training
test_counter = [i*len(train_loader.dataset) for i in range(n_epochs + 1)]

#melakukan proses training untuk menghitung lost dari training
def train(epoch): 
  network.train()
  for batch_idx, (data, target) in enumerate(train_loader):
    optimizer.zero_grad()
    output = network(data)
    loss = F.nll_loss(output, target)
    loss.backward()
    optimizer.step()
    if batch_idx % log_interval == 0:
      print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
        epoch, batch_idx * len(data), len(train_loader.dataset),
        100. * batch_idx / len(train_loader), loss.item()))
      train_losses.append(loss.item())
      train_counter.append(
        (batch_idx*64) + ((epoch-1)*len(train_loader.dataset)))

#melakukan proses test untuk menghitung lost dari test
def test(): 
  network.eval()
  test_loss = 0
  correct = 0
  with torch.no_grad():
    for data, target in test_loader:
      output = network(data)
      test_loss += F.nll_loss(output, target, size_average=False).item()
      pred = output.data.max(1, keepdim=True)[1]
      correct += pred.eq(target.data.view_as(pred)).sum()
  test_loss /= len(test_loader.dataset)
  test_losses.append(test_loss)
  print('\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
    test_loss, correct, len(test_loader.dataset),
    100. * correct / len(test_loader.dataset)))

#memanggil test
test()
for epoch in range(1, n_epochs + 1):
  train(epoch)
  test()

#untuk menampilkan plot
fig = plt.figure()
plt.plot(train_counter, train_losses, color='blue')
plt.scatter(test_counter, test_losses, color='red')
plt.legend(['Train Loss', 'Test Loss'], loc='upper right')
plt.xlabel('number of training examples seen')
plt.ylabel('negative log likelihood loss')
fig